{"version":3,"sources":["mappings/menuItems.js","components/Header.js","mappings/links.js","mappings/footer.js","components/Footer.js","components/Contact.js","components/Home.js","images/profilePhoto.jpg","components/SidePanel.js","mappings/works.js","components/WorkExperience.js","mappings/skills.js","components/Skills.js","mappings/projects.js","components/Projects.js","App.js","reportWebVitals.js","index.js"],"names":["menuItems","title","pageUrl","icon","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","border","boxShadow","menuButton","marginRight","spacing","link","textDecoration","listItemIcon","minWidth","button","color","Header","history","useHistory","classes","useState","anchorEl","setAnchorEl","open","Boolean","useTheme","isMobile","useMediaQuery","breakpoints","down","className","AppBar","position","Toolbar","IconButton","edge","onClick","event","currentTarget","map","menuItem","to","Button","startIcon","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","push","menuItemClickHandler","ListItemIcon","ListItemText","primary","links","footer","fontSize","style","paddingBottom","Footer","Box","textAlign","bgcolor","mx","p","Typography","variant","component","data","Link","href","padding","height","maxWidth","minHeight","form","marginTop","Alert","props","elevation","Contact","messageSent","setMessageSent","submissionError","setSubmissionError","setOpen","name","phone","email","message","values","setValues","errors","setErrors","handleInputValue","target","value","validateValues","temp","test","length","formIsValid","Object","every","x","formSubmitHandler","a","preventDefault","emailjs","sendForm","status","setTimeout","Card","CardContent","Collapse","in","severity","onSubmit","TextField","label","fullWidth","onBlur","onChange","autoComplete","error","helperText","placeholder","multiline","rows","type","endIcon","disabled","outerCard","Home","Fragment","display","media","SidePanel","CardMedia","image","profilePhoto","works","company","location","period","project","description","responsibilities","fileName","file","list","width","listItem","divider","margin","inline","WorkExperience","List","work","ListItem","alignItems","secondary","listStyleType","Divider","skills","DevOps","Database","Others","innerCard","innerCardContent","paddingLeft","chip","divStyle","paddingTop","Skills","keys","key","skill","Chip","projects","platform","Projects","sidePanel","App","Grid","container","item","md","sm","xs","lg","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.d7a1999f.chunk.js","sourcesContent":["import HomeIcon from '@material-ui/icons/Home';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\n\r\n// menu items for the website\r\nexport const menuItems = [\r\n    {\r\n        title: 'Home',\r\n        pageUrl: '/',\r\n        icon: <HomeIcon />\r\n    },\r\n    {\r\n        title: 'Work Experiences',\r\n        pageUrl: '/work',\r\n        icon: <WorkIcon />\r\n    },\r\n    {\r\n        title: 'Skills',\r\n        pageUrl: '/skills',\r\n        icon: <AssignmentTurnedInIcon />\r\n    },\r\n    {\r\n        title: 'Projects',\r\n        pageUrl: '/projects',\r\n        icon: <FolderOpenIcon />\r\n    },\r\n    {\r\n        title: 'Contact',\r\n        pageUrl: '/contact',\r\n        icon: <MessageIcon />\r\n    }\r\n];\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport { ListItemText } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { menuItems } from '../mappings/menuItems';\r\n\r\n// style used in the component\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: '#646d8f',\r\n        border: 'none',\r\n        boxShadow: 'none'\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    link: {\r\n        textDecoration: 'none'\r\n    },\r\n    listItemIcon: {\r\n        minWidth: '30px'\r\n    },\r\n    button: {\r\n        color: '#f5f5f5'\r\n    }\r\n}));\r\n\r\n// header component\r\nconst Header = () => {\r\n    // useHistory hook\r\n    const history = useHistory();\r\n\r\n    // use material ui styles\r\n    const classes = useStyles();\r\n\r\n    // initialize anchor element to null\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    // set open based on anchor element\r\n    const open = Boolean(anchorEl);\r\n    // use theme from material style\r\n    const theme = useTheme();\r\n    // set isMobile depending on media query result\r\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\r\n\r\n    // menu click handler for small screen\r\n    const menuClickHandler = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    // menu item click handler\r\n    const menuItemClickHandler = (pageUrl) => {\r\n        // update history with page url\r\n        history.push(pageUrl);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // menu close handler\r\n    const menuCloseHandler = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" className={classes.root}>\r\n                <Toolbar>\r\n                    {/* if screen is mobile render the menu button, else render buttons in nav bar */}\r\n                    {isMobile ? (\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            className={classes.menuButton}\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            onClick={menuClickHandler}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    ) : (\r\n                        <div>\r\n                            {menuItems.map((menuItem) => {\r\n                                return (\r\n                                    <Link\r\n                                        to={menuItem.pageUrl}\r\n                                        className={classes.link}\r\n                                        key={menuItem.title}\r\n                                    >\r\n                                        <Button\r\n                                            className={classes.button}\r\n                                            startIcon={menuItem.icon}\r\n                                        >\r\n                                            {menuItem.title}\r\n                                        </Button>\r\n                                    </Link>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                    <div>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right'\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right'\r\n                            }}\r\n                            open={open}\r\n                            onClose={menuCloseHandler}\r\n                        >\r\n                            {menuItems.map((menuItem) => {\r\n                                const { title, pageUrl, icon } =\r\n                                    menuItem;\r\n                                return (\r\n                                    <MenuItem\r\n                                        onClick={() =>\r\n                                            menuItemClickHandler(\r\n                                                pageUrl\r\n                                            )\r\n                                        }\r\n                                        key={title}\r\n                                    >\r\n                                        <ListItemIcon\r\n                                            className={\r\n                                                classes.listItemIcon\r\n                                            }\r\n                                        >\r\n                                            {icon}\r\n                                        </ListItemIcon>\r\n                                        <ListItemText\r\n                                            primary={title}\r\n                                        />\r\n                                    </MenuItem>\r\n                                );\r\n                            })}\r\n                        </Menu>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","// all the links used in the project\r\nexport const links = {\r\n    Tecnotree: 'http://www.tecnotree.com/',\r\n    Nokia: 'http://www.nokia.com',\r\n    Cloubi: 'http://www.cloubi.com/',\r\n    bKash: 'http://www.bkash.com/',\r\n    TUNI: 'http://www.tuni.fi/en',\r\n    DU: 'http://www.du.ac.bd/',\r\n    Github: 'http://github.com/saimulhq',\r\n    LinkedIn: 'http://linkedin.com/in/saimulhq',\r\n    Facebook: 'http://facebook.com/saimulhq',\r\n    ExpenseManager: 'http://github.com/saimulhq/expense-manager',\r\n    PhotoGallery: 'http://saimulhq.github.io/photo-gallery/',\r\n    FriendFinder: 'http://friendfinder-socialsite.herokuapp.com',\r\n    DevOps: 'http://github.com/saimulhq/devops-project',\r\n    Plagiar: 'http://github.com/saimulhq/plagiar',\r\n    MS_Thesis: 'http://trepo.tuni.fi/handle/10024/121626',\r\n    CV: '/files/cv_sheikh_14_07_23.pdf',\r\n    COR: '/files/certificate_of_recognition.pdf',\r\n    LOR: '/files/letter_of_recommendation.pdf'\r\n};\r\n","import GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport { links } from './links';\r\n\r\n// footer links\r\nexport const footer = [\r\n    {\r\n        link: links['LinkedIn'],\r\n        icon: <LinkedInIcon fontSize=\"medium\" />\r\n    },\r\n    {\r\n        link: links['Github'],\r\n        icon: (\r\n            <GitHubIcon\r\n                fontSize=\"small\"\r\n                style={{ paddingBottom: 'inherit' }}\r\n            />\r\n        )\r\n    },\r\n    {\r\n        link: links['Facebook'],\r\n        icon: <FacebookIcon fontSize=\"medium\" />\r\n    }\r\n];\r\n","import Box from '@material-ui/core/Box';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { footer } from '../mappings/footer';\r\n\r\n// footer component\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <Box\r\n                textAlign=\"center\"\r\n                bgcolor=\"#646d8f\"\r\n                color=\"white\"\r\n                mx=\"auto\"\r\n                p={1}\r\n            >\r\n                <Typography\r\n                    variant=\"caption\"\r\n                    component=\"span\"\r\n                    color=\"inherit\"\r\n                >\r\n                    There is always a solution to a problem.\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Box\r\n                textAlign=\"center\"\r\n                bgcolor=\"#646d8f\"\r\n                color=\"white\"\r\n                mx=\"auto\"\r\n                p={1}\r\n            >\r\n                {footer.map((data) => {\r\n                    return (\r\n                        <Link\r\n                            key={data.link}\r\n                            href={data.link}\r\n                            color=\"inherit\"\r\n                            style={{ padding: 2 }}\r\n                        >\r\n                            {data.icon}\r\n                        </Link>\r\n                    );\r\n                })}\r\n            </Box>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\nimport emailjs from 'emailjs-com';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardContent } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// style used in the component\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        height: 550,\r\n        maxWidth: 600,\r\n        minHeight: '100vh'\r\n    },\r\n    form: {\r\n        maxWidth: 700\r\n    },\r\n    button: {\r\n        color: 'white',\r\n        backgroundColor: '#646d8f',\r\n        marginTop: 20\r\n    }\r\n});\r\n\r\n// alert bar used for success or failure of message\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\n// contact component\r\nconst Contact = () => {\r\n    // initialize message sent to false\r\n    const [messageSent, setMessageSent] = useState(false);\r\n    // initialize submission error to false\r\n    const [submissionError, setSubmissionError] = useState(false);\r\n    // controller for opening and closing the message bar\r\n    const [open, setOpen] = useState(false);\r\n    // initialize values to be empty\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        message: ''\r\n    });\r\n    // initialize errors to be empty\r\n    const [errors, setErrors] = useState({\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        message: ''\r\n    });\r\n\r\n    // form input value handler\r\n    const handleInputValue = (event) => {\r\n        const { name, value } = event.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        });\r\n        // validate input value\r\n        validateValues({ [name]: value });\r\n    };\r\n\r\n    // form input value validator\r\n    const validateValues = (values) => {\r\n        let temp = { ...errors };\r\n\r\n        if ('name' in values)\r\n            temp.name = values.name ? '' : 'Required';\r\n\r\n        if ('email' in values) {\r\n            temp.email = values.email ? '' : 'Required';\r\n            if (values.email)\r\n                temp.email = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(\r\n                    values.email\r\n                )\r\n                    ? ''\r\n                    : 'Invalid Email Address';\r\n        }\r\n\r\n        if ('phone' in values)\r\n            if (values.phone)\r\n                temp.phone = /^\\d+$/.test(values.phone)\r\n                    ? ''\r\n                    : 'Invalid Phone Number';\r\n        if ('message' in values)\r\n            temp.message =\r\n                values.message.length !== 0 ? '' : 'Required';\r\n\r\n        // set errors if any\r\n        setErrors({\r\n            ...temp\r\n        });\r\n    };\r\n\r\n    // set form valid depending on the amount of errors\r\n    const formIsValid = () => {\r\n        const isValid =\r\n            values.name &&\r\n            values.email &&\r\n            values.message &&\r\n            Object.values(errors).every((x) => x === '');\r\n\r\n        return isValid;\r\n    };\r\n\r\n    // form submit handler\r\n    const formSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            const response = await emailjs.sendForm(\r\n                'service_v9sjkrn',\r\n                'template_bh09a9k',\r\n                event.target,\r\n                'PA_V5f1yoxvh_0Qjt'\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                setMessageSent(true);\r\n                setOpen(true);\r\n                setTimeout(() => {\r\n                    setOpen(false);\r\n                }, 5000);\r\n                setValues({\r\n                    name: '',\r\n                    phone: '',\r\n                    email: '',\r\n                    message: ''\r\n                });\r\n            }\r\n        } catch (err) {\r\n            setSubmissionError(true);\r\n            setOpen(true);\r\n            setTimeout(() => {\r\n                setOpen(false);\r\n            }, 5000);\r\n        }\r\n    };\r\n\r\n    // use material ui styles\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                {/* if submission error occures open message box */}\r\n                {submissionError && (\r\n                    <Collapse in={open}>\r\n                        <Alert severity=\"error\">\r\n                            Error while sending message! Please try\r\n                            again!\r\n                        </Alert>\r\n                    </Collapse>\r\n                )}\r\n\r\n                {/* if message issuccesfully sent error occures open message box */}\r\n                {messageSent && (\r\n                    <Collapse in={open}>\r\n                        <Alert severity=\"success\">\r\n                            Message sent successfully!\r\n                        </Alert>\r\n                    </Collapse>\r\n                )}\r\n\r\n                <form\r\n                    className=\"contact-form\"\r\n                    onSubmit={formSubmitHandler}\r\n                >\r\n                    <Typography variant=\"h6\" color=\"textPrimary\">\r\n                        Contact Me\r\n                    </Typography>\r\n\r\n                    {/* textfield for name */}\r\n                    {/* set error to true and show helper text if error is present */}\r\n                    <TextField\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        fullWidth\r\n                        onBlur={handleInputValue}\r\n                        onChange={handleInputValue}\r\n                        autoComplete=\"none\"\r\n                        {...(errors['name'] && {\r\n                            error: true,\r\n                            helperText: errors['name']\r\n                        })}\r\n                        value={values.name}\r\n                    />\r\n\r\n                    {/* textfield for email */}\r\n                    <TextField\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        fullWidth\r\n                        onBlur={handleInputValue}\r\n                        onChange={handleInputValue}\r\n                        value={values.email}\r\n                        autoComplete=\"none\"\r\n                        {...(errors['email'] && {\r\n                            error: true,\r\n                            helperText: errors['email']\r\n                        })}\r\n                    />\r\n\r\n                    {/* textfield for phone */}\r\n                    <TextField\r\n                        name=\"phone\"\r\n                        label=\"Phone\"\r\n                        fullWidth\r\n                        onBlur={handleInputValue}\r\n                        onChange={handleInputValue}\r\n                        autoComplete=\"none\"\r\n                        value={values.phone}\r\n                        {...(errors['phone'] && {\r\n                            error: true,\r\n                            helperText: errors['phone']\r\n                        })}\r\n                    />\r\n\r\n                    {/* textfield for message */}\r\n                    <TextField\r\n                        label=\"Message\"\r\n                        placeholder=\"Message\"\r\n                        name=\"message\"\r\n                        multiline\r\n                        fullWidth\r\n                        rows={4}\r\n                        onBlur={handleInputValue}\r\n                        onChange={handleInputValue}\r\n                        value={values.message}\r\n                        autoComplete=\"none\"\r\n                        {...(errors['message'] && {\r\n                            error: true,\r\n                            helperText: errors['message']\r\n                        })}\r\n                    />\r\n\r\n                    {/* submit button */}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        key={`${!formIsValid()}`}\r\n                        endIcon={<SendIcon>Send</SendIcon>}\r\n                        disabled={!formIsValid()}\r\n                        className={classes.button}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                </form>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport { Link as ReactReouterLink } from 'react-router-dom';\r\nimport { links } from '../mappings/links';\r\n\r\n// style used in the component\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        height: 500,\r\n        minHeight: '100vh'\r\n    },\r\n    outerCard: {\r\n        border: 'none',\r\n        boxShadow: 'none'\r\n    }\r\n});\r\n\r\n// home component\r\nconst Home = () => {\r\n    // using material ui style\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant=\"h6\" color=\"textPrimary\">\r\n                        Introduction\r\n                    </Typography>\r\n\r\n                    <Typography\r\n                        variant=\"body1\"\r\n                        component=\"span\"\r\n                        display=\"block\"\r\n                    >\r\n                        Hi, I am Sheikh Saimul Haque Nazeef Bin Enam\r\n                        a.k.a <b>Sheikh</b>. I am a{' '}\r\n                        <b>Senior Full Stack Software Developer</b>{' '}\r\n                        always open to new challenges. I have\r\n                        dedicated my life learning new technologies\r\n                        and experimenting with them in my everyday\r\n                        life. Currently I am working as a Senior Full\r\n                        Stack Software Engineer at{' '}\r\n                        <Link href={links['Nokia']}>Nokia</Link>\r\n                        .\r\n                        <br />\r\n                        <br />I completed my <b>\r\n                            Master of Science\r\n                        </b>{' '}\r\n                        Degree from{' '}\r\n                        <Link href={links['TUNI']}>\r\n                            Tampere University\r\n                        </Link>\r\n                        , Finland in June 2020. My major was{' '}\r\n                        <b>Software Engineering - Web and Cloud</b>. I\r\n                        obtained an overall grade of 4.02 on a scale\r\n                        of 5. My Thesis Title was\r\n                        {' \"'}\r\n                        <Link href={links['MS_Thesis']}>\r\n                            Optimizing the Efficiency of the Data\r\n                            Analytics Framework Using Microservice\r\n                            Architecture\r\n                        </Link>\r\n                        {'\"'}. This thesis was done for{' '}\r\n                        <Link href={links['Cloubi']}>Cloubi</Link>\r\n                        .\r\n                        <br />\r\n                        <br />I have a <b>Bachelor of Science</b>{' '}\r\n                        Degree from the{' '}\r\n                        <Link href={links['DU']}>\r\n                            University of Dhaka\r\n                        </Link>\r\n                        , Bangladesh where my major was{' '}\r\n                        <b>Software Engineering</b>. I graduated on\r\n                        December 2016 and obtained an overall grade of\r\n                        3.55 on a scale of 4. My final year project\r\n                        was Plagiar - A web based repository\r\n                        management and plagiarism detection tool.\r\n                        <br />\r\n                        <br />\r\n                        To know more about me, feel free to download\r\n                        my{' '}\r\n                        <ReactReouterLink\r\n                            to={links['CV']}\r\n                            target=\"_blank\"\r\n                        >\r\n                            <b>CV</b>\r\n                        </ReactReouterLink>\r\n                        !\r\n                        <br />\r\n                        <br />\r\n                        You can also contact me using the {'\"'}\r\n                        <b>Contact</b>\r\n                        {'\"'} tab above.\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n            <Card className={classes.outerCard}>\r\n                <CardContent>\r\n                    <Typography\r\n                        variant=\"caption\"\r\n                        component=\"span\"\r\n                        color=\"textSecondary\"\r\n                    >\r\n                        This website is developed using ReactJS,\r\n                        EmailJS and Material UI.\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","export default __webpack_public_path__ + \"static/media/profilePhoto.9c1c54a2.jpg\";","import { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport profilePhoto from '../images/profilePhoto.jpg';\r\n\r\n// style used in component\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        backgroundColor: '#f5e9e9'\r\n    },\r\n    media: {\r\n        height: 300\r\n    }\r\n});\r\n\r\n// side panel component\r\nconst SidePanel = () => {\r\n    // using material ui style\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root} disabled>\r\n            <CardMedia\r\n                className={classes.media}\r\n                image={profilePhoto}\r\n                title=\"Sheikh Photo\"\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"h6\" color=\"textPrimary\">\r\n                    Sheikh Bin Enam\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\" color=\"textPrimary\">\r\n                    Senior Full Stack Software Developer\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"textPrimary\">\r\n                    Specialized in Backend Development\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SidePanel;\r\n","import { links } from './links';\r\n\r\n// list of my work experience\r\nexport const works = [\r\n    {\r\n        title: 'Senior Full Stack Software Engineer',\r\n        company: 'Nokia Solutions and Networks',\r\n        link: links['Nokia'],\r\n        location: 'Espoo, Finland',\r\n        period: 'October 2021 - Present',\r\n        project: 'Nokia Orchestration OrderHub',\r\n        description:\r\n            'OrderHub is used to create different types of orders, managing and monitoring orders and it is also used for managing manual tasks.',\r\n        responsibilities: [\r\n            'Focusing mainly on backend development',\r\n            'REST APIs and feature development',\r\n            'Writing unit tests',\r\n            'Practicing SAFe within team',\r\n            'Responsible for migrating Java 11 to Java 17',\r\n            'Responsible for migrating Spring Boot 2 to Spring Boot 3',\r\n            'Acting as the lead product security expert',\r\n            'Generating Anchor, Trivy, VAMS for detecting vulnerabilities and fixing them',\r\n            'Fixing Sonarqube issues for the backend',\r\n            'Take part in release activities time to time',\r\n            'Time to time upgrading 3rd party libraries being used in the backend',\r\n            'Work on the UI when needed',\r\n            'Using tools like Jira, Confluence, and Microsoft Teams'\r\n        ],\r\n        fileName: '',\r\n        file: ''\r\n    },\r\n    {\r\n        title: 'Full Stack Software Developer',\r\n        company: 'Tecnotree Corporation',\r\n        link: links['Tecnotree'],\r\n        location: 'Tampere, Finland',\r\n        period: 'August 2020 - September 2021',\r\n        project: 'Tecnotree Digital Resource Manager Bulk Processor',\r\n        description:\r\n            'Bulk processor is used for processing the creation, deletion, updation and bundling of digital resources (SIM, MSISDN, IP etc) in bulk and keep track of these generated resources (success, failures, reason of failure etc). On successful creation the bulk processor sends Kakfa events, which other systems can listen to and perform actions based on it.',\r\n        responsibilities: [\r\n            'Focusing mainly on backend development',\r\n            'Single-handedly worked on the the backend of the project from designing the architecture to coding, testing and deployment',\r\n            'REST APIs and feature development',\r\n            'Writing unit tests',\r\n            'Practicing Scrum within the team',\r\n            'Responsible for TM Forum Open API certification for the product APIs',\r\n            'Fixing Sonarqube issues for the backend',\r\n            'Take part in release activities time to time',\r\n            'Time to time upgrading 3rd party libraries being used in the backend',\r\n            'Work on the UI when needed',\r\n            'Using tools like Jira, Confluence, and Microsoft Teams'\r\n        ],\r\n        fileName: 'Letter of Recognition',\r\n        file: links['COR']\r\n    },\r\n    {\r\n        title: 'Software Developer Trainee and Thesis Worker',\r\n        company: 'Cloubi Ltd.',\r\n        link: links['Cloubi'],\r\n        location: 'Tampere, Finland',\r\n        period: 'May 2019 - February 2020',\r\n        project: 'Cloubi Data Analytics Project',\r\n        description:\r\n            'It was developed for Cloubi and is used for generating the new data analytics report for the teachers to view the overall performance of the students.',\r\n        responsibilities: [\r\n            'Single-handedly worked on the backend of the project as a proof of concept for my Master’s Thesis',\r\n            'Thesis title: \"Optimizing the Efficiency of the Data Analytics Framework Using Microservice Architecture\"',\r\n            'REST APIs and feature development',\r\n            'Writing unit tests',\r\n            'Practicing Scrum within the team',\r\n            'Fixing Sonarqube issues',\r\n            'Using tools like Jira, Confluence, Slack, and Google Meet'\r\n        ],\r\n        fileName: 'Letter of Recognition',\r\n        file: links['LOR']\r\n    },\r\n    {\r\n        title: 'Software Quality Assurance Engineer',\r\n        company: 'Loence Solution',\r\n        link: '',\r\n        location: 'Dhaka, Bangladesh',\r\n        period: 'August 2017 - July 2018',\r\n        project: 'Loence ERP',\r\n        description:\r\n            'Manual software testing and had the opportunity to write automated tests of their main product which was an ERP system',\r\n        responsibilities: [\r\n            'Write automated test cases for the frontend using Selenium',\r\n            'Perform manual testing of the features',\r\n            'Practicing Scrum within the team',\r\n            'Using tools like Trello, Slack, and Google Meet'\r\n        ],\r\n        fileName: '',\r\n        file: ''\r\n    },\r\n    {\r\n        title: 'Intern, Research and Development Team, Technology Division',\r\n        company: 'bKash Ltd.',\r\n        link: links['bKash'],\r\n        location: 'Dhaka, Bangladesh',\r\n        period: 'January 2016 - June 2016',\r\n        project: 'bKash Phonebook Directory',\r\n        description:\r\n            'It was developed for managing the contact details of bKash employees and was internally used by bKash Ltd.',\r\n        responsibilities: [\r\n            'Single-handedly worked on the backend of the project from designing the architecture to coding and testing',\r\n            'REST APIs and feature development',\r\n            'Writing unit tests',\r\n            'Fixing Sonarqube issues',\r\n            'Using tools like Jira, Confluence, Slack, and Google Meet'\r\n        ],\r\n        fileName: '',\r\n        file: ''\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardContent } from '@material-ui/core';\r\n// import { Link as RouterLink } from 'react-router-dom';\r\nimport Link from '@material-ui/core/Link';\r\nimport { works } from '../mappings/works';\r\n\r\n// style used in the component\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        //height: 550,\r\n        minHeight: '100vh'\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0\r\n    },\r\n    listItem: {\r\n        padding: 0\r\n    },\r\n    divider: {\r\n        margin: 0\r\n    },\r\n    inline: {\r\n        display: 'inline'\r\n    }\r\n}));\r\n\r\n// work experience component\r\nconst WorkExperience = () => {\r\n    const classes = useStyles();\r\n\r\n    // loop and repeat list from work list inside configured in mappings\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" color=\"textPrimary\">\r\n                    Work Experiences\r\n                </Typography>\r\n                <List className={classes.list}>\r\n                    {works.map((work) => {\r\n                        return (\r\n                            <React.Fragment key={work.company}>\r\n                                <ListItem\r\n                                    alignItems=\"flex-start\"\r\n                                    className={classes.listItem}\r\n                                >\r\n                                    <ListItemText\r\n                                        primary={<b>{work.title}</b>}\r\n                                        secondary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {work.link ? (\r\n                                                        <Link\r\n                                                            href={\r\n                                                                work.link\r\n                                                            }\r\n                                                        >\r\n                                                            {\r\n                                                                work.company\r\n                                                            }\r\n                                                        </Link>\r\n                                                    ) : (\r\n                                                        <React.Fragment>\r\n                                                            {\r\n                                                                work.company\r\n                                                            }\r\n                                                        </React.Fragment>\r\n                                                    )}\r\n                                                </Typography>\r\n                                                <br />\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {work.location}\r\n                                                </Typography>\r\n                                                <br />\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {work.period}\r\n                                                </Typography>\r\n                                                <br />\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    Project:{' '}\r\n                                                    {work.project}\r\n                                                </Typography>\r\n                                                <br />\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    Description:{' '}\r\n                                                    {work.description}\r\n                                                </Typography>\r\n                                                <br />\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    Responsibilies:{' '}\r\n                                                    <ul\r\n                                                        style={{\r\n                                                            listStyleType:\r\n                                                                'square'\r\n                                                        }}\r\n                                                    >\r\n                                                        {work.responsibilities.map(\r\n                                                            (a) => {\r\n                                                                {\r\n                                                                    return (\r\n                                                                        <li>\r\n                                                                            {\r\n                                                                                a\r\n                                                                            }\r\n                                                                        </li>\r\n                                                                    );\r\n                                                                }\r\n                                                            }\r\n                                                        )}\r\n                                                    </ul>\r\n                                                </Typography>\r\n\r\n                                                {/* commenting out for now, needs re-work */}\r\n                                                {/* <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textSecondary\"\r\n                                                >\r\n                                                    <RouterLink\r\n                                                        to={work.file}\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        {\r\n                                                            work.fileName\r\n                                                        }\r\n                                                    </RouterLink>\r\n                                                </Typography> */}\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    />\r\n                                </ListItem>\r\n                                <Divider\r\n                                    variant=\"middle\"\r\n                                    component=\"li\"\r\n                                    className={classes.divider}\r\n                                />\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default WorkExperience;\r\n","// list of skills\r\nexport const skills = {\r\n    'Programming Language': [\r\n        'Go',\r\n        'Java',\r\n        'JS',\r\n        'Python',\r\n        'C',\r\n        'C++',\r\n        'C#',\r\n        'PHP',\r\n        'R'\r\n    ],\r\n    'Web Development': [\r\n        'ReactJS',\r\n        'NodeJS',\r\n        'ExpressJS',\r\n        'Spring Boot',\r\n        'ASP.Net',\r\n        'Django',\r\n        'HTML',\r\n        'CSS',\r\n        'Bootstrap',\r\n        'jQuery'\r\n    ],\r\n    DevOps: [\r\n        'Docker',\r\n        'Kubernetes',\r\n        'Gitlab-CI',\r\n        'Jenkins',\r\n        'Rancher',\r\n        'SonarQube'\r\n    ],\r\n    'Version Control': ['Git', 'SVN'],\r\n    Database: [\r\n        'Oracle',\r\n        'MySQL',\r\n        'Microsoft SQL',\r\n        'PostgreSQL',\r\n        'MongoDB'\r\n    ],\r\n    'Message Queing Service': ['Apache Kafka'],\r\n    'Development Tools': [\r\n        'IntelliJ IDEA',\r\n        'Eclipse',\r\n        'Netbeans',\r\n        'CodeBlocks',\r\n        'Microsoft Visual Studio',\r\n        'Microsoft Visual Studio Code',\r\n        'PyCharm',\r\n        'QT Creator',\r\n        'RStudio'\r\n    ],\r\n    'Testing Tools': [\r\n        'JUnit',\r\n        'Selenium',\r\n        'Mocha',\r\n        'Robot Framework'\r\n    ],\r\n    'Project Management Tools': ['Trello', 'Jira', 'Confluence'],\r\n    Others: ['Microsoft Office']\r\n};\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\n// import ListItemText from '@material-ui/core/ListItemText';\r\n// import ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\n// import Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Paper from '@material-ui/core/Paper';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardContent } from '@material-ui/core';\r\nimport { skills } from '../mappings/skills';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\n// style used in the component\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        minHeight: '100vh'\r\n    },\r\n    innerCard: {\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        padding: 0\r\n    },\r\n    innerCardContent: {\r\n        paddingLeft: 0,\r\n        '&:last-child': {\r\n            paddingBottom: 0\r\n        }\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0\r\n    },\r\n    listItem: {\r\n        padding: 0\r\n    },\r\n    chip: {\r\n        marginRight: '5px',\r\n        marginTop: '5px',\r\n        backgroundColor: '#f5e9e9'\r\n    },\r\n    divider: {\r\n        margin: 0\r\n    },\r\n    divStyle: {\r\n        paddingBottom: '10px',\r\n        paddingTop: '5px'\r\n    },\r\n    inline: {\r\n        display: 'inline'\r\n    }\r\n}));\r\n\r\n// skills component\r\nconst Skills = () => {\r\n    const classes = useStyles();\r\n\r\n    // go over from skills object configured in mappings\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" color=\"textPrimary\">\r\n                    Technical Skills\r\n                </Typography>\r\n                <List className={classes.list}>\r\n                    {Object.keys(skills).map((key) => {\r\n                        return (\r\n                            <React.Fragment key={key}>\r\n                                <ListItem\r\n                                    alignItems=\"flex-start\"\r\n                                    className={classes.listItem}\r\n                                >\r\n                                    <Card\r\n                                        className={classes.innerCard}\r\n                                    >\r\n                                        <CardContent\r\n                                            className={\r\n                                                classes.innerCardContent\r\n                                            }\r\n                                        >\r\n                                            <Typography\r\n                                                variant=\"subtitle1\"\r\n                                                color=\"textPrimary\"\r\n                                            >\r\n                                                <b>{key}</b>\r\n                                            </Typography>\r\n                                            <div\r\n                                                className={\r\n                                                    classes.divStyle\r\n                                                }\r\n                                            >\r\n                                                {skills[key].map(\r\n                                                    (skill) => {\r\n                                                        return (\r\n                                                            <Chip\r\n                                                                key={\r\n                                                                    skill\r\n                                                                }\r\n                                                                label={\r\n                                                                    skill\r\n                                                                }\r\n                                                                className={\r\n                                                                    classes.chip\r\n                                                                }\r\n                                                            />\r\n                                                        );\r\n                                                    }\r\n                                                )}\r\n                                            </div>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </ListItem>\r\n                                <Divider\r\n                                    variant=\"middle\"\r\n                                    component=\"li\"\r\n                                    className={classes.divider}\r\n                                />\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Skills;\r\n","import { links } from './links';\r\n\r\n// list of my projects\r\nexport const projects = [\r\n    {\r\n        title: 'Tecnotree Digital Resource Manager Bulk Process',\r\n        link: '',\r\n        description:\r\n            'Worked on the backend of this project for Tecnotree, it processes the creation, deletion, updation and bundling of digital resources (SIM, MSISDN, IP etc) in bulk and keep track of these generated resources (success, failures, reason of failure etc). On successful creation the bulk process sends Kakfa events, which other systems can listen to and perform actions based on it.',\r\n        platform:\r\n            'ExpressJS, MongoDB, Apache Kafka, Docker, Protobuf, grpc, Jenkins, SonarQube'\r\n    },\r\n    {\r\n        title: 'Expense Manager',\r\n        link: links['ExpenseManager'],\r\n        description:\r\n            'This is a simple CRUD backend application that is used for creating a new expense, delete an expense, get an expense, update an expense and list all the expenses.',\r\n        platform: 'Go, MongoDB, Protobuf, grpc, grpc-gateway'\r\n    },\r\n    {\r\n        title: 'HI-DE Crane Registration System',\r\n        link: '',\r\n        description:\r\n            'This project has been developed for HIAB, a subsidiary of Cargotec Ltd for registering the purchase date of the crane parts sold by HIAB and keeping track of warranty of the parts.',\r\n        platform: 'ExpressJS, ReactJS, PostgreSQL'\r\n    },\r\n    {\r\n        title: 'Photo Gallery',\r\n        link: links['PhotoGallery'],\r\n        description:\r\n            'This is a front end application made with ReactJS and Material UI that loads images from a Fake Mock Rest API.',\r\n        platform: 'ReactJS'\r\n    },\r\n    {\r\n        title: 'Friend Finder',\r\n        link: links['FriendFinder'],\r\n        description:\r\n            'This project is a social networking site with the features of adding new friends, deleting friends, creating discussions, update status and removing user account. (username: saimulhq, password: iit12345)',\r\n        platform: 'Django, PostgreSQL'\r\n    },\r\n    {\r\n        title: 'DevOps Project',\r\n        link: links['DevOps'],\r\n        description:\r\n            'This project was done for learning DevOps using Gitlab-CI and had several stages in the pipeline, like static analysis of the code and testing.',\r\n        platform: 'Docker, Gitlab-CI, NodeJS, Mocha'\r\n    },\r\n    {\r\n        title: 'Plagiar',\r\n        link: links['Plagiar'],\r\n        description:\r\n            'This is a web-based project made to detect plagiarism with a selected repository and is a complete repository management system.',\r\n        platform: 'Java EE, Oracle'\r\n    },\r\n    {\r\n        title: 'IIT Problem Management System',\r\n        link: '',\r\n        description:\r\n            'This is a web-based project made to automate the whole manual problem management system of IIT i.e. lodging complaint against a problem, notifying a technician and taking necessary actions.',\r\n        platform: 'ASP.Net MVC 5 / C#, Microsoft SQL'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardContent } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport { projects } from '../mappings/projects';\r\n\r\n// style used in the component\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        minHeight: '100vh'\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0\r\n    },\r\n    listItem: {\r\n        padding: 0\r\n    },\r\n    divider: {\r\n        margin: 0\r\n    },\r\n    inline: {\r\n        display: 'inline'\r\n    }\r\n}));\r\n\r\n// project component\r\nconst Projects = () => {\r\n    const classes = useStyles();\r\n\r\n    // loop and repeat list from project list inside configured in mappings\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" color=\"textPrimary\">\r\n                    Projects\r\n                </Typography>\r\n                <List className={classes.list}>\r\n                    {projects.map((project) => {\r\n                        return (\r\n                            <React.Fragment key={project.title}>\r\n                                <ListItem\r\n                                    alignItems=\"flex-start\"\r\n                                    className={classes.listItem}\r\n                                >\r\n                                    <ListItemText\r\n                                        primary={\r\n                                            project.link ? (\r\n                                                <Link\r\n                                                    href={\r\n                                                        project.link\r\n                                                    }\r\n                                                >\r\n                                                    <b>\r\n                                                        {\r\n                                                            project.title\r\n                                                        }\r\n                                                    </b>\r\n                                                </Link>\r\n                                            ) : (\r\n                                                <b>{project.title}</b>\r\n                                            )\r\n                                        }\r\n                                        secondary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {\r\n                                                        project.description\r\n                                                    }\r\n                                                </Typography>\r\n                                                <br />\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    className={\r\n                                                        classes.inline\r\n                                                    }\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    Platform:{' '}\r\n                                                    {project.platform}\r\n                                                </Typography>\r\n                                                <br />\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    />\r\n                                </ListItem>\r\n                                <Divider\r\n                                    variant=\"middle\"\r\n                                    component=\"li\"\r\n                                    className={classes.divider}\r\n                                />\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n","import Header from './components/Header.js';\r\nimport Footer from './components/Footer.js';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Contact from './components/Contact.js';\r\nimport Home from './components/Home.js';\r\nimport SidePanel from './components/SidePanel.js';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport WorkExperience from './components/WorkExperience';\r\nimport Skills from './components/Skills';\r\nimport Projects from './components/Projects';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    sidePanel: {\r\n        backgroundColor: '#f5e9e9'\r\n    }\r\n}));\r\n\r\nconst App = () => {\r\n    // using material ui style\r\n    const classes = useStyles();\r\n\r\n    // dividing the screen using grid\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={0}>\r\n                <Grid item md={12} sm={12} xs={12} lg={12}>\r\n                    <Header />\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    lg={3}\r\n                    className={classes.sidePanel}\r\n                >\r\n                    <SidePanel />\r\n                </Grid>\r\n                <Grid item md={9} sm={12} xs={12} lg={9}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route\r\n                            exact\r\n                            path=\"/contact\"\r\n                            component={Contact}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/work\"\r\n                            component={WorkExperience}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/skills\"\r\n                            component={Skills}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/projects\"\r\n                            component={Projects}\r\n                        />\r\n                    </Switch>\r\n                </Grid>\r\n                <Grid item md={12} sm={12} xs={12} lg={12}>\r\n                    <Footer />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter basename=\"/portfolio\">\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}